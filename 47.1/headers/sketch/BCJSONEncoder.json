{
  "imports": [
    "NSObject.h"
  ],
  "classes": [
    "MSJSONArchiver",
    "NSError"
  ],
  "protocol": false,
  "className": "BCJSONEncoder",
  "extends": "NSObject",
  "interfaces": [],
  "methods": {
    "initialize": {
      "name": "initialize",
      "bridgedName": "initialize",
      "args": [],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setAliasName:forClass:": {
      "name": "setAliasName:forClass:",
      "bridgedName": "setAliasName_forClass",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "Class"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "encodeObjectAsData:error:": {
      "name": "encodeObjectAsData:error:",
      "bridgedName": "encodeObjectAsData_error",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id *"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "encoderForWritingToMutableData:": {
      "name": "encoderForWritingToMutableData:",
      "bridgedName": "encoderForWritingToMutableData",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "encodeObject:toURL:error:": {
      "name": "encodeObject:toURL:error:",
      "bridgedName": "encodeObject_toURL_error",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "id *"
        }
      ],
      "returns": "BOOL",
      "kind": "class",
      "kindIndicator": "+"
    },
    "encoderForWritingToURL:": {
      "name": "encoderForWritingToURL:",
      "bridgedName": "encoderForWritingToURL",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "encodeObject:toFile:error:": {
      "name": "encodeObject:toFile:error:",
      "bridgedName": "encodeObject_toFile_error",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "id *"
        }
      ],
      "returns": "BOOL",
      "kind": "class",
      "kindIndicator": "+"
    },
    "encoderForWritingToFile:": {
      "name": "encoderForWritingToFile:",
      "bridgedName": "encoderForWritingToFile",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "encodeObjectAsString:error:": {
      "name": "encodeObjectAsString:error:",
      "bridgedName": "encodeObjectAsString_error",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id *"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    ".cxx_destruct": {
      "name": ".cxx_destruct",
      "bridgedName": ".cxx_destruct",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeSize:forKey:": {
      "name": "encodeSize:forKey:",
      "bridgedName": "encodeSize_forKey",
      "args": [
        {
          "type": "struct CGSize"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeInteger:forKey:": {
      "name": "encodeInteger:forKey:",
      "bridgedName": "encodeInteger_forKey",
      "args": [
        {
          "type": "long long"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodePoint:forKey:": {
      "name": "encodePoint:forKey:",
      "bridgedName": "encodePoint_forKey",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeRect:forKey:": {
      "name": "encodeRect:forKey:",
      "bridgedName": "encodeRect_forKey",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeBool:forKey:": {
      "name": "encodeBool:forKey:",
      "bridgedName": "encodeBool_forKey",
      "args": [
        {
          "type": "BOOL"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeDouble:forKey:": {
      "name": "encodeDouble:forKey:",
      "bridgedName": "encodeDouble_forKey",
      "args": [
        {
          "type": "double"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeRootObject:error:": {
      "name": "encodeRootObject:error:",
      "bridgedName": "encodeRootObject_error",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id *"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeObject:forKey:": {
      "name": "encodeObject:forKey:",
      "bridgedName": "encodeObject_forKey",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeObject:forKey:includeSeparator:": {
      "name": "encodeObject:forKey:includeSeparator:",
      "bridgedName": "encodeObject_forKey_includeSeparator",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeStringWithoutCheckingFormat:forKey:includeSeparator:": {
      "name": "encodeStringWithoutCheckingFormat:forKey:includeSeparator:",
      "bridgedName": "encodeStringWithoutCheckingFormat_forKey_includeSeparator",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeStringWithoutCheckingFormat:includeQuotes:": {
      "name": "encodeStringWithoutCheckingFormat:includeQuotes:",
      "bridgedName": "encodeStringWithoutCheckingFormat_includeQuotes",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeObject:": {
      "name": "encodeObject:",
      "bridgedName": "encodeObject",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "writeData:length:": {
      "name": "writeData:length:",
      "bridgedName": "writeData_length",
      "args": [
        {
          "type": "const void *"
        },
        {
          "type": "unsigned long long"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "classNameForClass:": {
      "name": "classNameForClass:",
      "bridgedName": "classNameForClass",
      "args": [
        {
          "type": "Class"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "error": {
      "name": "error",
      "pointer": true,
      "type": "NSError",
      "attributes": [
        "copy",
        "nonatomic"
      ]
    },
    "userInfo": {
      "name": "userInfo",
      "pointer": false,
      "type": "__weak id",
      "attributes": [
        "nonatomic"
      ]
    },
    "archiver": {
      "name": "archiver",
      "pointer": true,
      "type": "__weak MSJSONArchiver",
      "attributes": [
        "nonatomic"
      ]
    }
  }
}