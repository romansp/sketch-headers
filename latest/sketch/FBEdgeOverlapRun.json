{
  "imports": [
    "NSObject.h"
  ],
  "classes": [
    "FBBezierContour",
    "NSArray",
    "NSMutableArray"
  ],
  "protocol": false,
  "className": "FBEdgeOverlapRun",
  "extends": "NSObject",
  "interfaces": [],
  "methods": {
    "overlapRun": {
      "name": "overlapRun",
      "bridgedName": "overlapRun",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    ".cxx_destruct": {
      "name": ".cxx_destruct",
      "bridgedName": ".cxx_destruct",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugQuickLookObject": {
      "name": "debugQuickLookObject",
      "bridgedName": "debugQuickLookObject",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "edgeOverlapsWithBlock:": {
      "name": "edgeOverlapsWithBlock:",
      "bridgedName": "edgeOverlapsWithBlock",
      "args": [
        {
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "description": {
      "name": "description",
      "bridgedName": "description",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "middleIntersection": {
      "name": "middleIntersection",
      "bridgedName": "middleIntersection",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addStartAndStopCrossings": {
      "name": "addStartAndStopCrossings",
      "bridgedName": "addStartAndStopCrossings",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addMiddleCrossing": {
      "name": "addMiddleCrossing",
      "bridgedName": "addMiddleCrossing",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isCrossingUsingNonZeroWindingRule": {
      "name": "isCrossingUsingNonZeroWindingRule",
      "bridgedName": "isCrossingUsingNonZeroWindingRule",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isCrossing": {
      "name": "isCrossing",
      "bridgedName": "isCrossing",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isCrossingWithTangentsOnly": {
      "name": "isCrossingWithTangentsOnly",
      "bridgedName": "isCrossingWithTangentsOnly",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "doesContainParameter:onEdge:": {
      "name": "doesContainParameter:onEdge:",
      "bridgedName": "doesContainParameter_onEdge",
      "args": [
        {
          "type": "double"
        },
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "doesContainCrossing:": {
      "name": "doesContainCrossing:",
      "bridgedName": "doesContainCrossing",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isComplete": {
      "name": "isComplete",
      "bridgedName": "isComplete",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "insertOverlap:": {
      "name": "insertOverlap:",
      "bridgedName": "insertOverlap",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "init": {
      "name": "init",
      "bridgedName": "init",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "overlaps": {
      "name": "overlaps",
      "pointer": true,
      "type": "NSArray",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "contour2": {
      "name": "contour2",
      "pointer": true,
      "type": "FBBezierContour",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "contour1": {
      "name": "contour1",
      "pointer": true,
      "type": "FBBezierContour",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    }
  }
}